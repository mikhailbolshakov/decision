// Code generated by mockery 2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

// HasRoles provides a mock function with given fields: roles
func (_m *Controller) HasRoles(roles ...string) func(context.Context, *http.Request) (bool, error) {
	_va := make([]interface{}, len(roles))
	for _i := range roles {
		_va[_i] = roles[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 func(context.Context, *http.Request) (bool, error)
	if rf, ok := ret.Get(0).(func(...string) func(context.Context, *http.Request) (bool, error)); ok {
		r0 = rf(roles...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(context.Context, *http.Request) (bool, error))
		}
	}

	return r0
}

// MyClientProfile provides a mock function with given fields: ctx, r
func (_m *Controller) MyClientProfile(ctx context.Context, r *http.Request) (bool, error) {
	ret := _m.Called(ctx, r)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) bool); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MyPartnerProfile provides a mock function with given fields: ctx, r
func (_m *Controller) MyPartnerProfile(ctx context.Context, r *http.Request) (bool, error) {
	ret := _m.Called(ctx, r)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) bool); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MyUser provides a mock function with given fields: ctx, r
func (_m *Controller) MyUser(ctx context.Context, r *http.Request) (bool, error) {
	ret := _m.Called(ctx, r)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) bool); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewController interface {
	mock.TestingT
	Cleanup(func())
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewController(t mockConstructorTestingTNewController) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
